/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
//#include <dt-bindings/zmk/mouse.h>

&mt {
    flavor = "tap-preferred";
    tapping-term-ms = <200>;
};
/*
&mmv {
   time-to-max-speed-ms = <680>;
   acceleration-exponent=<2>;
};
*/
/ {
        behaviors {
                hm: homerow_mods {
                        compatible = "zmk,behavior-hold-tap";
                        #binding-cells = <2>;
                        tapping-term-ms = <200>;
                        flavor = "tap-preferred";
                        bindings = <&kp>, <&kp>;
                };
                lhk: layer_hold_key {
                        compatible = "zmk,behavior-hold-tap";
                        #binding-cells = <2>;
                        tapping-term-ms = <200>;
                        flavor = "tap-preferred";
                        bindings = <&kp>, <&to>;
                };
        };
        conditional_layers {
                compatible = "zmk,conditional-layers";
                tri_layer {
                if-layers = <1 2>;
                then-layer = <4>;
                };
        };
        keymap {
                compatible = "zmk,keymap";

                default_layer {
// -----------------------------------------------------------------------------------------
// | ESC  |  Q  |  W  |  F  |  P  |  B  |   |  J  |  L   |  U   |  Y  |  /  | DEL  |
// | CAP  |  A  |  R  |  S  |  T  |  G  |   |  M  |  N   |  E   |  I  |  O  | L2   |
// | _    |  Z  |  X  |  C  |  D  |  V  |   |  K  |  H   |  ,   |  .  |  ;  |  "   |
//                    | TAB | ESC | SPC |   | ENT | L1   | BKSP |
                        bindings = <
   &kp ESC     &kp Q      &kp W      &kp F       &kp P       &kp B   &kp J &kp L       &kp U       &kp Y      &kp FSLH   &kp DEL
   &caps_word  &hm LGUI A &hm LALT R &hm LCTRL S &hm LSHFT T &kp G   &kp M &hm LSHFT N &hm LCTRL E &hm LALT I &hm LGUI O &none
   &kp UNDER   &kp Z      &kp X      &kp C       &kp D       &kp V   &kp K &kp H       &kp COMMA   &kp DOT    &kp SEMI   &hm DQT SQT
               &mt LC(LA(LS(LGUI))) TAB &mt LC(LS(LGUI)) SPACE &lt 1 ESC    &mo 2 &mt LC(LGUI) RET  &kp BSPC
                        >;
                };
                number_layer {
                        
// -----------------------------------------------------------------------------------------
// | ESC  |  *  |  7  |  8  |  9  |  =  |   |  <  |  {  |  }   |  >  |  #  | DEL  |
// | `    |  /  |  4  |  5  |  6  |  +  |   |  ^  |  (  |  )   |  !  |  &  | L2   |
// | _    |  0  |  1  |  2  |  3  |  -  |   |  \  |  [  |  ]   |  @  |  ;  | $    |
//                    | TAB | L0  | SPC |   | ENT | L1  | BKSP |
                        bindings = <
   &kp ESC         &kp KP_MULTIPLY &kp N7      &kp N8       &kp N9       &kp EQUAL   &kp LT        &kp LBRC       &kp RBRC       &kp GT        &hm QMARK HASH &kp DEL
   &hm TILDE GRAVE &hm LGUI FSLH   &hm LALT N4 &hm LCTRL N5 &hm LSHFT N6 &kp PLUS    &kp CARET     &hm LSHFT LPAR &hm LCTRL RPAR &hm LALT EXCL &hm LGUI AMPS  &none
   &kp UNDER       &kp N0          &kp N1      &kp N2       &kp N3       &kp MINUS   &hm PIPE BSLH &kp LBKT       &hm COMMA RBKT &hm DOT AT    &kp SEMI       &hm PRCNT DLLR
                       &mt LC(LA(LS(LGUI))) TAB &mt LC(LS(LGUI)) SPACE &lt 1 ESC    &mo 2 &mt LC(LGUI) RET  &kp BSPC
                        >;
                };
                
                nav_layer {
// -----------------------------------------------------------------------------------------
// | REPT | F10 | F7  | F8  | F9  |  `  |   | PGU | HOME | UP   | END | PRT | DEL  |
// | CAP  | F11 | F3  | F4  | F5  |     |   | PGD | LFT  | DWN  | RHT |     | L2   |
// | none | F12 | F1  | F2  | F3  |     |   |     |      |      |     |     | L3   |
//                    | TAB | L0  | SPC |   | ENT | L1   | BKSP |
                        bindings = <
   &kp ESC &kp F10      &kp F7      &kp F8       &kp F9       &kp GRAVE    &kp HOME &none    &kp PG_DN &kp PG_UP &kp PSCRN &kp DEL
   &none   &hm LGUI F11 &hm LALT F4 &hm LCTRL F5 &hm LSHFT F6 &none        &kp END  &kp LEFT &kp DOWN  &kp UP    &kp RIGHT &none
   &none   &kp F12      &kp F1      &kp F2       &kp F3       &none        &none    &none    &none     &none     &none     &to 3
                         &mt LC(LA(LS(LGUI))) TAB &mt LC(LS(LGUI)) SPACE &lt 1 ESC      &mo 2 &mt LC(LGUI) RET  &kp BSPC
                        >;
                };
                media_layer {
// -----------------------------------------------------------------------------------------
// | none | BTC |     | PRV | NXT |     |   | SU  | LC | MU   | RC | PRT | DEL  |
// | CAP  |     | PLY | V-  | V+  |     |   | SD  | ML | MD   | MR |     | REPT |
// | none |     |     | BTP | BTN |     |   |     | SL |      | SR |     |      |
//                    | TAB | L0  | SPC |   | ENT |    | BKSP |
                        /*
                        bindings = <
   &kp TAB   &bt BT_CLR &none    &kp C_PREV   &kp C_NEXT   &none        &mwh SCROLL_UP   &mkp LCLK        &mmv MOVE_UP   &mkp RCLK         &kp PSCRN &kp DEL
   &sk LGUI  &none      &kp C_PP &kp C_VOL_DN &kp C_VOL_UP &none        &mwh SCROLL_DOWN &mmv MOVE_LEFT   &mmv MOVE_DOWN &mmv MOVE_RIGHT   &none     &kp BSPC
   &sk LCTRL &none      &none    &bt BT_PRV   &bt BT_NXT   &none        &none            &mwh SCROLL_LEFT &none          &mwh SCROLL_RIGHT &none     &none
                         &sk LSHFT &to 0 &mt LC(LS(LGUI)) SPACE     &mt LC(LGUI) RET &none &kp BSPC
                        >;
                        */
                        bindings = <
   &kp ESC &bt BT_CLR &none         &kp C_PREV         &kp C_NEXT         &none        &kp PG_UP &kp HOME &kp UP   &kp END   &kp PSCRN &kp DEL
   &none   &kp LGUI   &hm LALT C_PP &hm LCTRL C_VOL_DN &hm LSHFT C_VOL_UP &none        &kp PG_DN &kp LEFT &kp DOWN &kp RIGHT &none     &key_repeat
   &none   &none      &none         &bt BT_PRV         &bt BT_NXT         &none        &none     &none    &none    &none     &none     &none
                         &mt LC(LA(LS(LGUI))) TAB &mt LC(LS(LGUI)) SPACE &to 0         &none     &mt LC(LGUI) RET  &kp BSPC
                        >;
                };
                nav_num_layer {
                        bindings = <
   &kp ESC         &kp KP_MULTIPLY &kp N7      &kp N8       &kp N9       &kp EQUAL      &kp HOME &none    &kp PG_DN &kp PG_UP &kp PSCRN &kp DEL
   &hm TILDE GRAVE &hm LGUI FSLH   &hm LALT N4 &hm LCTRL N5 &hm LSHFT N6 &kp PLUS       &kp END  &kp LEFT &kp DOWN  &kp UP    &kp RIGHT &none
   &kp UNDER       &kp N0          &kp N1      &kp N2       &kp N3       &kp MINUS      &none    &none    &none     &none     &none      &to 3
                         &mt LC(LA(LS(LGUI))) TAB &mt LC(LS(LGUI)) SPACE &lt 1 ESC      &mo 2 &mt LC(LGUI) RET  &kp BSPC
                        >;
                };
        };
};

